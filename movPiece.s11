; This method will move a player from the source position to the destanation
; position.
;
; Input:
; 1. Label of the board - will be stored at 2(sp).
; 2. Source position - will be stored at 4(sp).
; 3. Destanation position - will be stored at 6(sp).


movPiece:
         mov r1, -(sp) ; Backing up  r1.
         mov r3, -(sp) ; Backing up  r3.
         ; Now we will calculate the address of source position and put it in r1.
         mov 4(sp), r1 ; r1 = index of source position
         mul #2, r1 ; r1 = 2*r1 . This is in order to calculate the address.
         add 2(sp), r1 ; r1 = r1 + address of beginning of the board.
         ; Now we will calculate the address of dest position and put it in r3.
         mov 6(sp), r3 ; r3 = index of destanation position
         mul #2, r3 ; r3 = 2*r3 .  This is in order to calculate the address.
         add 2(sp), r3 ; r3 = r3 + address of beginning of the board.

         ; Making the changes.
         mov (r1), (r3) ; board[dest] = board[source].
         mov #0, (r1) ; board[source] = 0.

         ; Now we need to check if there was an eat. We will find the address
         ; in the middle between the source address and the dest address.
         ; Notice that if there was an eat then the address of the eaten cell
         ; is a multiply of 2 and is equal to: (src_addr + dest_addr)/2 .
		     ; In that case we also need to put 0 in that place.
         ; If there was no eat then the address of the middle cell is not a
         ; multiply of 2 and so we need to finish the function.
         mov r0, -(sp) ; Backing up r0.
		     clr r0
         add r3, r1 ; r1 = source address + dest address
         div #2, r0  ; r0 will hold the address of the eaten cell in case of eat.
		     mov r0, -(sp) ; Backing up the address of the eaten cell.
         ; Now we have the potenitally eaten cell address. we need to check if
         ; that eaten cell address is a multiply of 2.
		     clr r0
		     mov (sp), r1 ; r1 = eaten cell address.
	    	 div #2, r0 ; r1 will hold the remainer.
         cmp r1, #0 ;
         bne endmop ; if the remainer is not zero there was no eat. goto endmop.
         ; If we got here then the remainer is zero. it means that there was an
         ; eat and we need to put 0 in the eaten place.
         ; Notice that the eaten cell address is at sp.
         mov #0, @(sp)
         ; Method is done. Restoring registers.
         endmop:
				tst (sp)+ ; popping the eaten cell address (no longer needed).
                mov (sp)+, r0 ; Restoring value of r0.
                mov (sp)+, r3 ; Restoring value of r4.
                mov (sp)+, r1 ; Restoring value of r3.
                rts pc
