tks = 177560
tkb = 177562
tps = 177564
tpb = 177566
asciimask = 177760

.=torg + 60
.word rInput
.word 200

.=torg + 1000
main:
; Initializing stack
mov pc, sp
tst -(sp)
mov #welcome, -(sp)
jsr pc, printStr
tst (sp)+
jsr pc, printNL ; Printing new line
mov #command, pointer
mov #101,@#tks ; keyboard interrupt = 1 && RE = 1
w:
cmp putDolar, #0
bne cont
mov #1, putDolar
jsr pc, printdol ; Printing $ if needed
cont:
wait
jmp w

; Read input
rInput:
movb @#tkb, curChar

; Check if we reached the end of the command
mov r0, -(sp) ; Backing up r0
mov #command, r0 ; Moving command string address to r0
add #50., r0 ; Adding max length of string to r0.
cmp pointer, r0 ; Checks if the command reached 50 chars.
bgt ignore
; We have not reached the end of the command
cmpb curChar, #'\r  ; checks if current char is ENTER
beq endOfIpt
cmpb #'\b, curChar  ; checks if current char is BackSpace
beq backspace
; Current char is a neither ENTER nor BackSpace
movb curChar, @pointer
movb curChar, @#tpb ; sending char to print
loop: tstb @#tps
bpl loop
; curChar was printed
inc pointer
mov (sp)+, r0 ; Restores r0.
inc @#tks ; RE = 1
rti

endOfIpt:
jsr pc, printNL ; Printing new line
movb #0, @pointer ; Adds linefeed to the command string.
mov #command, pointer ; Pointer will point the beginning of the command
mov (sp)+, r0 ; Restoring r0
jsr pc, decode ; Decoding the command
mov #command, pointer ; Pointer will point the beginning of the command
mov #0, putDolar
inc @#tks ; RE = 1
rti





backspace:
cmp #command, pointer
beq ignore
dec pointer
movb #'\b, @#tpb
wait0:		tstb @#tps
bpl wait0
movb #' , @#tpb
wait1:		tstb @#tps
bpl wait1
movb #'\b, @#tpb
wait2:		tstb @#tps
bpl wait2
inc @#tks ; RE = 1
mov (sp)+, r0 ; Restoring r0
rti
ignore:
mov (sp)+, r0 ; Restoring r0
inc @#tks ; RE = 1
rti

decode:
cmpb @pointer, #'s
beq sCom
cmpb @pointer, #'t
beq tCom
cmpb @pointer, #'m
beq mCom
jmp noCom

sCom:
inc pointer
cmpb @pointer, #'t
bne noCom
inc pointer
cmpb @pointer, #'a
beq staCom
cmpb @pointer, #'o
bne noCom
; If we got here we had the sequence 'sto'
inc pointer
cmpb @pointer, #'p
bne noCom
jmp stopCom

staCom:
; If we got here we had the sequence 'sta'
inc pointer
cmpb @pointer, #'r
bne noCom
inc pointer
cmpb @pointer, #'t
bne noCom
inc pointer
cmpb #' , @pointer
bne noCom
jmp startCom


tCom:
; If we got here we had 't'
inc pointer
cmpb @pointer, #'i
bne noCom
inc pointer
cmpb @pointer, #'m
bne noCom
inc pointer
cmpb @pointer, #'e
bne noCom
jmp timeCom

mCom:
; If we got here we had 'm'
inc pointer
cmpb @pointer, #'o
bne noCom
inc pointer
cmpb @pointer, #'v
bne noCom
inc pointer
cmpb @pointer, #'e
bne noCom
inc pointer
cmpb #' , @pointer
bne noCom
jmp moveCom

;-------------------------------------------------------------------------------
;                           Illegal command
;-------------------------------------------------------------------------------
noCom:
; Prints cannot execute..
jsr pc, printNL ; Printing new line
mov #cannot, -(sp)
jsr pc, printStr
tst (sp)+
mov #command, pointer
mov #errorCom, errPtr
cpyErr:
cmpb  #' , @pointer
beq donecpy
cmpb  #0 , @pointer
beq donecpy
movb @pointer, @errPtr
inc errPtr
inc pointer
jmp cpyErr

donecpy:
movb #'", @errPtr
inc errPtr
movb #'\r, @errPtr
mov #errorCom, -(sp)
jsr pc, printStr
tst (sp)+
mov #command, pointer
jsr pc, printNL ; Printing new line
rts pc ; return from decode
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;-------------------------------------------------------------------------------
;                           Command is 'start'
;-------------------------------------------------------------------------------
startCom:
inc pointer
cmpb  #' , @pointer
beq startCom ; skipping spaces
; Spaces skipped
setWplyr: ; Set white player
cmpb @pointer, #'h
beq wHuman
cmpb @pointer, #'c
beq wPC
jmp noCom

wHuman:
mov #1, wPlayer
; Checks if after 'h' there is a space. if not -> noCom
inc pointer
cmpb #' , @pointer
bne noCom
dec pointer
jmp setwTime
wPC:
mov #2, wPlayer
; Checks if after 'c' there is a space. if not -> noCom
inc pointer
cmpb #' , @pointer
bne noCom
dec pointer
jmp setwTime

setwTime:
mov #0, wTime ; White Time
inc pointer
cmpb #' , @pointer
beq setwTime ; skipping spaces
cmpb @pointer, #'0
blt noCom ; jumps if not a number
cmpb @pointer, #'9
bgt noCom ; jumps if not a number
jsr pc, RstBWStr ; Reseting values of wTimeStr and bTimeStr
; If we got here it is a number
rdWTime: ; Read White player time
mov r1, -(sp) ; Backing up r1
mov wTime, r1
mul #10., r1
mov r1, wTime
mov (sp)+, r1
mov r0, -(sp) ; Backing up r0
movb @pointer, @wTimePtr ; copy ascii number to a string (will be printed later)
inc wTimePtr
movb @pointer, r0
bic #asciimask, r0
add r0, wTime
mov (sp)+, r0
inc pointer
cmpb #' , @pointer
beq setBplyr ; Set Black Player
cmpb @pointer, #'0
blt jnoCom ; jumps if not a number
cmpb @pointer, #'9
bgt jnoCom ; jumps if not a number
jmp rdWTime ; Read White Time

setBplyr:
inc pointer
cmpb  #' , @pointer
beq setBplyr ; skipping spaces
cmpb @pointer, #'h
beq bHuman
cmpb @pointer, #'c
beq bPC
jmp noCom

bHuman:
mov #1, bPlayer
; Checks if after 'h' there is a space. if not -> noCom
inc pointer
cmpb #' , @pointer
bne jnoCom
dec pointer
jmp setbTime ; Set Black Time

bPC:
mov #2, bPlayer
; Checks if after 'c' there is a space. if not -> noCom
inc pointer
cmpb #' , @pointer
bne jnoCom
dec pointer
jmp setbTime ; Set Black Time

                  jnoCom: jmp noCom

setbTime:
mov #0, bTime
inc pointer
cmpb #' , @pointer
beq setbTime ; skipping spaces
cmpb @pointer, #'0
blt jnoCom ; jumps if not a number
cmpb  @pointer, #'9
bgt jnoCom ; jumps if not a number
; If we got here it is a number
rdBTime: ; Read Black player time
mov r1, -(sp) ; Backing up r1
mov bTime, r1
mul #10., r1
mov r1, bTime
mov (sp)+, r1
mov r0, -(sp) ; Backing up r0
movb @pointer, @bTimePtr ; copy ascii number to a string (will be printed later)
inc bTimePtr
movb @pointer, r0
bic #asciimask, r0
add r0, bTime
mov (sp)+, r0
inc pointer
cmpb @pointer, #'0
blt startChk ; jumps if not a number
cmpb @pointer, #'9
bgt startChk ; jumps if not a number
jmp rdBTime ; Read Black Time

startChk:
cmpb @pointer, #0
bne jnoCom
cmp gameOn, #0
bne jnoCom
jmp startOK

startOK:
mov #1, gameOn
jsr pc, printNL ; Printing new line
jsr pc, Start

rts pc ; Return from decode

Start:
mov #newgame, -(sp)
jsr pc, printStr
tst (sp)+
jsr pc, printNL ; Printing new line
jsr pc, printWPI ; Printing "White player is "
cmpb #1, wPlayer
beq wplyrHmn ; White Player Human
; White player is computer
jsr pc, printPC ; Printing "Computer "
br wplyrtime ; White Player Time
wplyrHmn:
; White player is human
jsr pc, printHmn ; Printing "Human "
br wplyrtime

wplyrtime:
; Printing time for white player
mov #with, -(sp)
jsr pc, printStr
tst (sp)+

jsr pc, printWPT ; print White Player Time

jsr pc, printSPM ; Printing "seconds per move\r"
jsr pc, printNL ; Printing new line


jsr pc, printBPI ; Printing "Black player is "
cmpb bPlayer, #1
beq bplyrHmn ; Black Player Human
; Black player is Computer
jsr pc, printPC ; Printing "Computer "
br bplyrtime
bplyrHmn:
; Black player is Human
jsr pc, printHmn ; Printing "Human "
br bplyrtime

bplyrtime:
; Printing time for white player
mov #with, -(sp)
jsr pc, printStr
tst (sp)+

jsr pc, printBPT ; print Black Player Time
jsr pc, printSPM ; Printing "seconds per move\r"
jsr pc, printNL ; Printing new line


jsr pc, initBoard ; Initializing the board
jsr pc, printB ; Printing the board
jsr pc, printWCP ; Printing white current player
jsr pc, printNL ; Printing new line

rts pc ; Return from decode
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

                            jnoCom1: jmp noCom

;-------------------------------------------------------------------------------
;                           Command is 'stop'
;-------------------------------------------------------------------------------
stopCom:
mov #0, gameOn ; Stopping the game
;-------------------------------------------------------------------------------
; todo: enter here code to print relevant data of the end game
;-------------------------------------------------------------------------------
rts pc ; Return from decode
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;-------------------------------------------------------------------------------
;                           Command is 'time'
;-------------------------------------------------------------------------------
timeCom:

;-------------------------------------------------------------------------------
; todo: enter here code to print time left of the turn
;-------------------------------------------------------------------------------

rts pc
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;-------------------------------------------------------------------------------
;                           Command is 'move'
;-------------------------------------------------------------------------------
moveCom:
; The command is 'move'
cmp gameOn, #0
beq jnoCom1
cmpb  #' , @pointer
bne continue
inc pointer ; Skipping spaces.
br moveCom
continue:
cmpb @pointer, #'0
blt jnoCom1
cmpb  @pointer, #'7
bgt jnoCom1
mov r0, -(sp)  ; Backing up r0.
mov r1, -(sp)  ; Backing up r1.
mov r2, -(sp)  ; Backing up r2.
mov r3, -(sp)  ; Backing up r3.
mov r4, -(sp)  ; Backing up r4.
mov r5, -(sp)  ; Backing up r5.
clr r1
movb @pointer, r0
bic #asciimask, r0
mov r0, r2 ; r2 will be used for row index.
mov r0, r1
asl r1
asl r1
asl r1
inc pointer ;Get next index character.
cmpb @pointer, #'0
blt badIdxj
cmpb  @pointer, #'7
bgt badIdxj
movb @pointer, r0
bic #asciimask, r0
mov r0, r3 ; r3 will be used for column index.
add r0, r1
mul #2, r1 ;Multiplying by 2 (each word is 2 bytes).
add #Board, r1
mov r1, source ; source will hold source board adress.
cmp (r1), turn ;Checks if a piece of the current player is found in the given index.
bne badIdxj
inc pointer
skip:
cmpb  #' , @pointer
bne cont2
inc pointer ; Skipping spaces.
br skip
cont2:
cmpb @pointer, #'0
blt badIdxj
cmpb  @pointer, #'7
bgt badIdxj
clr r1
movb @pointer, r0
bic #asciimask, r0
add r0, r1
asl r1
asl r1
asl r1
inc pointer ;Get next index character.
cmpb @pointer, #'0
blt badIdxj
cmpb @pointer, #'7
bgt badIdxj
movb @pointer, r0
bic #asciimask, r0
add r0, r1
mul #2, r1 ;Multiplying by 2 (each word is 2 bytes).
add #Board, r1
mov r1, dest ;dest will now hold desteation board adress.
cmp dest, source
beq badIdxj ; Checks if source == dest.
cmp #1, turn
bne bIdxChk ; Black index Check
;Checking if the desteation adress is legal for white player.
cmp source, dest
blt badIdxj ; If source<dest white is trying to move down instead of up.
mov r2, r4 ;Using r4 as temporary row index.
sub #1, r4 ; Reducing row index by 1.
cmp r4, #0
blt badIdxj ; If row index is less than 0, cannot move left or right.
mov r3, r5 ;Using r5 as temporary column index.
add #1, r5 ; Increasing column index by 1.
cmp r5, #7
bgt LeftWmv ; If column index is bigger than 7, the current piece cannot move right.
; If we got here the desteation index can be the upper right cell.
mov source, r1
cmp -14.(r1), #1 ; Checking if the upper right piece is white.
beq LeftWmv ; If the upper right piece is white, cannot go there, check legal moves to the left.
cmp -14.(r1), #2 ; Checking if the upper right piece is black.
beq eatrwmv ; If the upper right piece is black, check if the white piece can eat it.
; If we got here we need to check if the desteation adress equals to the left right cell adress.
sub #14., r1
cmp r1, dest
beq destFj
jmp LeftWmv ; Keep on checking legal moves to the left (cannot eat so we don't need to check an eating option).

badIdxj:
  jmp badIdx

destFj:
  jmp destFound

eatrwmv:
sub #1, r4 ; Reducing row index by 1.
cmp r4, #0
blt LeftWmv ; If r4 is less than 0, cannot eat (out of bounds). Check legal moves to the left.
add #1, r5 ;Increasing column index by 1.
cmp r5, #7
bgt LeftWmv ; If column index is bigger than 7, cannot eat (out of bounds). Check legal moves to the left.
;If we got here, the cell which the current white piece should be placed after eating is in the board bounds, we need to check if it is empty.
mov source, r1
cmp -28.(r1), #0 ; Checking if the cell is empty.
bne LeftWmv ; If the cell is not empty, cannot eat. Check legal moves to the left.
; If we got here we need to check if dest == upper right cell (after eating).
sub #28., r1
cmp dest, r1
beq destFj

LeftWmv:
mov r2, r4 ; Putting index of the current row in r4.
sub #1, r4 ; Reducing row index by 1.
mov r3, r5 ; Putting index of the current column in r5.
sub #1, r5 ; Reducing column index by 1.
cmp r5, #0
blt badIdxj ; If column index is less than 0, cannot move right, dest is not a legal cell adress.
mov source, r1
cmp -18.(r1), #1 ; Checking if the upper left piece is white.
beq badIdxj ; If the upper left piece is white, cannot move there, dest is not a legal cell adress.
cmp -18.(r1), #2 ; Checking if the upper left piece is black.
beq eatlwmv ; If the upper left piece is black, Check if the white piece can eat it.
sub #18., r1
cmp dest, r1
beq destFj
jmp badIdxj ; If we got here there are no more moves to check and desteation adress wans't found.

eatlwmv:
sub #1, r5 ; Reducing column index by 1.
cmp r5, #0
blt badIdxj ; If column index is less than 0, cannot eat, dest is not a legal cell adress.
sub #1, r3 ; Reducing row index by 1.
cmp r3, #0
blt badIdxj ; If r3 is less than 0, cannot eat (out of bounds). dest is not a legal cell adress.
;If we got here, the cell which the current white piece should be placed after eating is in the board bounds, Check if it is empty.
mov source,r1
cmp -36.(r1), #0 ; Checking if the cell is empty.
bne badIdxj ;If the cell is not empty, cannot eat. Skip to the next cell.
sub #36., r1
cmp dest, r1
beq destFound
jmp badIdxj ; No more moving options.

bIdxChk:
cmp source, dest
bgt badIdxj ; If source>dest black is trying to move up instead of down.
mov r2, r4 ; Putting index of the current row in r4.
add #1, r4 ; Increasing row index by 1.
cmp r4, #7
bgt badIdxj ; If row index is bigger than 7, cannot move left, dest adress cannot be legal.
mov r3, r5 ; Setting r5 to the current column index (after changing it eariler).
add #1, r5 ; Increasing column index by 1.
cmp r5, #7
bgt RightBmv ; If column index is bigger than 7, the current piece cannot move left, Check legal moves to the right.
mov source, r1
cmp 18.(r1), #2 ; Checking if the lower right piece is black.
beq RightBmv ; If the lower right piece is black, cannot go there, Check legal moves to the right.
; If we got here the desteation index can be the lower right cell.
cmp 18.(r1), #1 ; Checking if the lower right piece is black.
beq eatlbmv ; If the lower right piece is white, check if the black piece can eat it.
add #18., r1
cmp dest, r1
beq destFound
br RightBmv ; Keep on checking legal moves to the right (cannot eat so we don't need to check an eating option).

eatlbmv:
add #1, r4 ; Increasing row index by 1.
cmp r4, #7 ; If r3 is bigger than 7, cannot eat (out of bounds). Check legal moves to the right.
bgt RightBmv
add #1, r5 ;Increasing column index by 1.
cmp r5, #7
bgt RightBmv ; If column index is bigger than 7, cannot eat (out of bounds). Check legal moves to the right.
;If we got here, the cell which the current black piece should be placed after eating is in the board bounds, we need to check if it is empty.
mov source, r1
cmp 36.(r1), #0 ; Checking if the cell is empty.
bne RightBmv ; If the cell is not empty, cannot eat. Check legal moves to the right.
add #36., r1
cmp dest, r1
beq destFound

RightBmv:
mov r2, r4 ; Putting index of the current row in r3.
add #1, r4 ; Increasing row index by 1.
mov r3, r5 ; Putting index of the current column in r5.
sub #1, r5 ; Decreasing column index by 1.
cmp r5, #0
blt badIdxju ; If column index is less than 0, cannot move right, desteation adress cannot be legal.
mov source, r1
cmp 14.(r1), #2 ; Checking if the lower left piece is black.
beq badIdxju ; If the lower left piece is white, cannot move there, desteation adress cannot be legal.
cmp 14.(r1), #1 ; Checking if the lower left piece is white.
beq eatrbmv ; If the lower left piece is white, check if the black piece can eat it.
add #14., r1
cmp dest, r1
beq destFound
jmp badIdxj ;No more moving options.

badIdxju:
jmp badIdx

eatrbmv:
sub #1, r5 ; Reducing column index by 1.
cmp r5, #0
blt badIdxju ; If column index is less than 0, cannot eat, desteation adress cannot be legal.
add #1, r4 ; Increasing row index by 1.
cmp r4, #7
bgt badIdxju ; If r3 is bigger than 7, cannot eat (out of bounds). Skip to the next cell.
;If we got here, the cell which the current white piece should be placed after eating is in the board bounds, Check if it is empty.
mov source, r1
cmp 28.(r1), #0 ; Checking if the cell is empty.
bne badIdxju ;If the cell is not empty, cannot eat.
add #28., r1
cmp dest, r1
beq destFound
jmp badIdxj ; No more moving options.

destFound:
mov (sp)+, r5
mov (sp)+, r4
mov (sp)+, r3
mov (sp)+, r2
mov (sp)+, r1 ;Restores r1's value.
mov (sp)+, r0 ;Restores r0's value.
mov source, -(sp)
mov dest, -(sp)
jsr pc, movPiece
add #4, sp ;Popping source and dest.
jsr pc, printNL ; Printing new line

cmp turn, #1
beq whitMv
; Black Player Turn
jsr pc, printBLK ; Printing: 'Black '
jmp zibby

whitMv:

jsr pc, printWHT
zibby:
jsr pc, printHmn ; Printing: 'Human '
jsr pc, printMT ; Printing: 'move took '

;-------------------------------------------------------------------------------
; todo: print how much time did it take from human to make a move
;-------------------------------------------------------------------------------
mov #secStr, -(sp)
jsr pc, printStr
tst (sp)+
mov #dotStr, -(sp)
jsr pc, printStr
tst (sp)+
jsr pc, printB
jsr pc, chgTurn
rts pc

badIdx:
mov (sp)+, r5
mov (sp)+, r4
mov (sp)+, r3
mov (sp)+, r2
mov (sp)+, r1
mov (sp)+, r0
jmp noCom
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;===============================================================================
;                                FUNCTIONS
;===============================================================================
;-------------------------------------------------------------------------------
;                                movPiece
;-------------------------------------------------------------------------------
; This method will move a player from the source position to the destanation
; position.
;
; Input:
; 1. Destination position - will be stored at 2(sp).
; 2. Source position - will be stored at 4(sp).

movPiece:
 mov r1, -(sp) ; Backing up  r1.
 mov r3, -(sp) ; Backing up  r3.
 mov 10(sp), r1 ; r1 = Adress of source position.
 mov 6(sp), r3 ; r3 = Adress of destanation position.

 ; Making the changes.
 mov (r1), (r3) ; board[dest] = board[source].
 mov #0, (r1) ; board[source] = 0.

 ; Now we need to check if there was an eat. We will find the address
 ; in the middle between the source address and the dest address.
 ; Notice that if there was an eat then the address of the eaten cell
 ; is a multiply of 2 and is equal to: (src_addr + dest_addr)/2 .
 ; In that case we also need to put 0 in that place.
 ; If there was no eat then the address of the middle cell is not a
 ; multiply of 2 and so we need to finish the function.
 mov r0, -(sp) ; Backing up r0.
 clr r0
 add r3, r1 ; r1 = source address + dest address
 div #2, r0  ; r0 will hold the address of the eaten cell in case of eat.
 mov r0, -(sp) ; Backing up the address of the eaten cell.
 ; Now we have the potenitally eaten cell address. we need to check if
 ; that eaten cell address is a multiply of 2.
 clr r0
 mov (sp), r1 ; r1 = eaten cell address.
 div #2, r0 ; r1 will hold the remainer.
 cmp r1, #0 ;
 bne endmop ; if the remainer is not zero there was no eat. goto endmop.
 ; If we got here then the remainer is zero. it means that there was an
 ; eat and we need to put 0 in the eaten place.
 ; Notice that the eaten cell address is at sp.
 mov #0, @(sp)
; Method is done. Restoring registers.
endmop:
tst (sp)+ ; popping the eaten cell address (no longer needed).
mov (sp)+, r0 ; Restoring value of r0.
mov (sp)+, r3 ; Restoring value of r4.
mov (sp)+, r1 ; Restoring value of r3.
rts pc
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;-------------------------------------------------------------------------------
;                                PrintStr
;-------------------------------------------------------------------------------
printStr:
tstb @#tps ;Busy wait, wait till end of print.
bpl printStr
cmpb #'\0, @2(sp) ; Check if reached end of string.
beq sof
cmpb #'\r, @2(sp) ;Check if reached end of string and needs to print a new line.
beq newline
movb @2(sp), @#tpb ;Print char.
inc 2(sp) ; Move to the next char.
br printStr
newline:
tstb @#tps ;Busy wait, wait till end of print.
bpl newline
movb #'\r, @#tpb ;Prints carrige return.
wx: tstb @#tps ;Busy wait, wait till end of print.
bpl wx
movb #'\n, @#tpb ; Prints a new line.
wz: tstb @#tps ;Busy wait, wait till end of print.
bpl wz
sof:
rts pc
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;-------------------------------------------------------------------------------
;                                printdol
;-------------------------------------------------------------------------------
printdol:
; Printing "$"
mov #dollar, -(sp)
jsr pc, printStr
tst (sp)+
rts pc
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;-------------------------------------------------------------------------------
;                                printHmn
;-------------------------------------------------------------------------------
printHmn:
; Printing "Human "
mov #hmn, -(sp)
jsr pc, printStr
tst (sp)+
rts pc
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;-------------------------------------------------------------------------------
;                                printPC
;-------------------------------------------------------------------------------
printPC:
; Printing "Computer "
mov #computer, -(sp)
jsr pc, printStr
tst (sp)+
rts pc
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;-------------------------------------------------------------------------------
;                                printSPM
;-------------------------------------------------------------------------------
printSPM:
; Printing " seconds per move\r"
mov #secpermov, -(sp)
jsr pc, printStr
tst (sp)+
rts pc
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;-------------------------------------------------------------------------------
;                                printBPI
;-------------------------------------------------------------------------------
printBPI:
; Printing "Black player is "
mov #bplyris, -(sp)
jsr pc, printStr
tst (sp)+
rts pc
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;-------------------------------------------------------------------------------
;                                printWPI
;-------------------------------------------------------------------------------
printWPI:
; Printing "White player is "
mov #wplyris, -(sp)
jsr pc, printStr
tst (sp)+
rts pc
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;-------------------------------------------------------------------------------
;                                printBPT
;-------------------------------------------------------------------------------
printBPT:
; Printing how much time the black player has to move
mov #bTimeStr, -(sp)
jsr pc, printStr
tst (sp)+
rts pc
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;-------------------------------------------------------------------------------
;                                printWHT
;-------------------------------------------------------------------------------
printWHT:
; Printing: "White "
mov #Wht, -(sp)
jsr pc, printStr
tst (sp)+
rts pc
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;-------------------------------------------------------------------------------
;                                printBLK
;-------------------------------------------------------------------------------
printBLK:
; Printing: "White "
mov #Blk, -(sp)
jsr pc, printStr
tst (sp)+
rts pc
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;-------------------------------------------------------------------------------
;                                printWPT
;-------------------------------------------------------------------------------
printWPT:
; Printing how much time the black player has to move
mov #wTimeStr, -(sp)
jsr pc, printStr
tst (sp)+
rts pc
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;-------------------------------------------------------------------------------
;                                printNL
;-------------------------------------------------------------------------------
printNL:
; Printing new line
mov #nlfeed, -(sp)
jsr pc, printStr
tst (sp)+
rts pc
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;-------------------------------------------------------------------------------
;                                printMT
;-------------------------------------------------------------------------------
printMT:
; Printing: 'move took '
mov #movStr, -(sp)
jsr pc, printStr
tst (sp)+
mov #tookStr, -(sp)
jsr pc, printStr
tst (sp)+
rts pc
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;-------------------------------------------------------------------------------
;                                printBL
;-------------------------------------------------------------------------------
printBL:
; Printing 'Board layout:\r'
mov #boardlay, -(sp)
jsr pc, printStr
tst (sp)+
jsr pc, printNL ; Printing new line
rts pc
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;-------------------------------------------------------------------------------
;                                chgTurn
;-------------------------------------------------------------------------------
chgTurn:
; Changing turn
mov r0, -(sp)
mov #3, r0
sub turn, r0
mov r0, turn
mov (sp)+, r0
rts pc
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;-------------------------------------------------------------------------------
;                                printWCP
;-------------------------------------------------------------------------------
printWCP:
; Printing: 'Current Player: White'
mov #CPStr, -(sp)
jsr pc, printStr
tst (sp)+
mov #Wht, -(sp)
jsr pc, printStr
tst (sp)+
cmp #1, wPlayer
beq whitpl
; White Player is computer
mov #computer, -(sp)
jsr pc, printStr
tst (sp)+
jmp endWCP
whitpl:
; White player is Human
mov #hmn, -(sp)
jsr pc, printStr
tst (sp)+
endWCP:
jsr pc, printNL ; Printing new line
rts pc
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;-------------------------------------------------------------------------------
;                                printBCP
;-------------------------------------------------------------------------------
printBCP:
; Printing: 'Current Player: White'
mov #CPStr, -(sp)
jsr pc, printStr
tst (sp)+
mov #Blk, -(sp)
jsr pc, printStr
tst (sp)+
cmp #1, wPlayer
beq blkpl
; White Player is computer
mov #computer, -(sp)
jsr pc, printStr
tst (sp)+
jmp endBCP
blkpl:
; White player is Human
mov #hmn, -(sp)
jsr pc, printStr
tst (sp)+
endBCP:
jsr pc, printNL ; Printing new line
rts pc
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;-------------------------------------------------------------------------------
;                                RstBWStr
;-------------------------------------------------------------------------------
RstBWStr:
; Resets values of bTimeStr and wTimeStr
mov r0, -(sp) ; Backing up r0
mov #25., r0
mov #bTimeStr, bTimePtr
mov #wTimeStr, wTimePtr
loopRst:
mov #0, @bTimePtr
add #2, bTimePtr
mov #0, @wTimePtr
add #2, wTimePtr
sub #1, r0
cmp r0, #0
bne loopRst
mov #bTimeStr, bTimePtr
mov #wTimeStr, wTimePtr
mov (sp)+, r0 ; Restoring r0
rts pc
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;-------------------------------------------------------------------------------
;                                printB
;-------------------------------------------------------------------------------
printB:
; Printing board
jsr pc, printNL ; Printing new line
jsr pc, printNL ; Printing new line
jsr pc, printNL ; Printing new line
jsr pc, printBL ; Printing 'Board layout:\r'
mov r0, -(sp) ; Backing up r0.
mov r1, -(sp) ; Backing up r1.
mov r2, -(sp) ; Backing up r2.
mov #8., r2
mov #Board, r1
add #128., r1
mov #Board, r0
Ploop:
cmp r0, r1
beq endP
tst r2 ; R2 will be initialized with 8 (number of words to print per row).
bne conP
mov #8., r2
jsr pc, printNL ; Printing new line
conP:
cmp (r0), #0 ;Check if we need to print _.
beq print_
cmp (r0), #1 ;Check if we need to print W.
beq printWH
tst (r0) ; Move to the next word.
movb #'B, @#tpb
pwait:
tstb @#tps ;Busy wait, wait till end of print.
bpl pwait
add #2, r0
dec r2
br Ploop
printWH:
movb #'W, @#tpb
p1wait:
tstb @#tps ;Busy wait, wait till end of print.
bpl p1wait
add #2, r0
dec r2
br Ploop
print_:
movb #'_, @#tpb
p2wait:
tstb @#tps ;Busy wait, wait till end of print.
bpl p2wait
add #2, r0
dec r2
br Ploop
endP:
jsr pc, printNL ; Printing new line
jsr pc, printNL ; Printing new line
mov (sp)+, r2
mov (sp)+, r1
mov (sp)+, r0
rts pc
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;-------------------------------------------------------------------------------
;                                initBoard
;-------------------------------------------------------------------------------

initBoard:
mov r0, -(sp) ; Backing up r0.
mov r1, -(sp) ; Backing up r1.
mov r2, -(sp) ; Backing up r2.
mov #Board, r1
add #128., r1
mov #Board, r0
mov #NewBoard, r2
Cpyloop:
cmp r0, r1
beq endCpy
mov (r2)+, (r0)+
br Cpyloop
endCpy:
mov (sp)+, r2
mov (sp)+, r1
mov (sp)+, r0
rts pc
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;==============================================================================
;                             END OF FUNCTIONS
;==============================================================================

.=torg + 8000
command: .blkw 25.
pointer: .blkw 1
curChar: .byte 1
.even
gameOn: .word 0
errorCom: .blkw 25.
errPtr: .blkw 1
putDolar: .word 0

turn: .word 1
source: .word 0
dest: .word 0



wPlayer: .byte 0
.even
wTime: .word 0
wTimeStr: .blkw 25.
wTimePtr: .word 0
bPlayer: .byte 0
.even
bTime: .word 0
bTimeStr: .blkw 25.
bTimePtr: .word 0

.even
TIMOUT:.word 1

;========================================================================
;                            STRINGS
;========================================================================

.even
cannot: .ascii <Cannot\sexecute\s"\0>
dollar: .ascii <$ \0>
welcome:.ascii <Welcome\sto\s312433576\sand\s203438775\scheckers\sgame!\r>
newgame: .ascii<Starting\sa\snew\sgame\r>
wplyris: .ascii<White\splayer\sis\s\0>
bplyris: .ascii<Black\splayer\sis\s\0>
hmn: .ascii<Human\s\0>
computer: .ascii<Computer\s\0>
with: .ascii <with\s\0>
secpermov: .ascii< seconds\sper\smove\r>
boardlay: .ascii<Board layout:\r>
nlfeed: .ascii<\r>
CPStr: .ascii <Current\sPlayer:\s\0>
Blk: .ascii <Black\s\0>
Wht: .ascii <White\s\0>
movStr: .ascii <move\s\0>
tookStr: .ascii <took\s\0>
secStr: .ascii <seconds\0>
dotStr: .ascii <.\r>

.even
Board:.word	0,	0,	0,	2,	0,	0,	0,	2
			.word	0,	0,	2,	0,	2,	0,	2,	0
			.word	0,	1,	0,	1,	0,	2,	0,	1
			.word	1,	0,	0,	0,	0,	0,	0,	0
			.word	0,	0,	0,	0,	0,	0,	0,	0
			.word	1,	0,	1,	0,	1,	0,	1,	0
			.word	0,	1,	0,	1,	0,	1,	0,	1
			.word	1,	0,	1,	0,	1,	0,	1,	0

NewBoard:
  .word	0,	2,	0,	2,	0,	2,	0,	2
	.word	2,	0,	2,	0,	2,	0,	2,	0
	.word	0,	2,	0,	2,	0,	2,	0,	2
	.word	0,	0,	0,	0,	0,	0,	0,	0
	.word	0,	0,	0,	0,	0,	0,	0,	0
	.word	1,	0,	1,	0,	1,	0,	1,	0
	.word	0,	1,	0,	1,	0,	1,	0,	1
	.word	1,	0,	1,	0,	1,	0,	1,	0
