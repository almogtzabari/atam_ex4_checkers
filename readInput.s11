tks = 177560
tkb = 177562
tps = 177564
tpb = 177566

.=torg + 1000
main:
; Initializing stack
mov pc, sp
tst -(sp)

mov #command, pointer
;mov #printc, @#64 ; printer subrotine
;mov #200,@#66 ; printer priority
;mov #100, @#tps ; printer interrupt = 1

mov #rInput, @#60 ; keyboard subrotine
mov #200,@#62 ; keyboard priority
mov #101,@#tks ; keyboard interrupt = 1 && RE = 1
w:
jmp w

; Read input
rInput:
movb @#tkb, curChar

; Check if we reached the end of the command
mov r0, -(sp) ; Backing up r0
mov #command, r0 ; Moving command string address to r0
add #50., r0 ; Adding max length of string to r0.
cmp pointer, r0 ; Checks if the command reached 50 chars.
bgt ignore
; We have not reached the end of the command
cmpb curChar, #'\r  ; checks if current char is ENTER
beq endOfIpt
cmpb #'\b, curChar  ; checks if current char is BackSpace
beq backspace
; Current char is a neither ENTER nor BackSpace
movb curChar, @pointer
movb curChar, @#tpb ; sending char to print
loop: tstb @#tps
bpl loop
; curChar was printed
inc pointer
mov (sp)+, r0 ; Restores r0.
inc @#tks ; RE = 1
rti

endOfIpt:
movb #'\n, @#tpb ; Prints Carrige Return/
w1:tstb @#tps
bpl w1
movb #'\r, @#tpb ; Prints LineFeed.
w2:tstb @#tps
bpl w2
movb #0, @pointer ; Adds linefeed to the command string.
mov #command, pointer ; Pointer will point the beginning of the command
mov (sp)+, r0 ; Restoring r0
jsr pc, decode ; Decoding the command
inc @#tks ; RE = 1
rti





backspace:
cmp #command, pointer
beq ignore
dec pointer
movb #'\b, @#tpb
wait0:		tstb @#tps
bpl wait0
movb #' , @#tpb
wait1:		tstb @#tps
bpl wait1
movb #'\b, @#tpb
wait2:		tstb @#tps
bpl wait2
inc @#tks ; RE = 1
mov (sp)+, r0 ; Restoring r0
rti
ignore:
mov (sp)+, r0 ; Restoring r0
inc @#tks ; RE = 1
rti

decode:
cmpb @pointer, #'s
beq sCom
cmpb @pointer, #'t
beq tCom
cmpb @pointer, #'m
beq mCom
jmp noCom

sCom:
inc pointer
cmpb @pointer, #'t
bne noCom
inc pointer
cmpb @pointer, #'a
beq staCom
cmpb @pointer, #'o
bne noCom
; If we got here we had the sequence 'sto'
inc pointer
cmp @pointer, #'p
bne noCom
jmp stopCom

staCom:
; If we got here we had the sequence 'sta'
inc pointer
cmpb @pointer, #'r
bne noCom
inc pointer
cmpb @pointer, #'t
bne noCom
jmp startCom


tCom:
; If we got here we had 't'
inc pointer
cmpb @pointer, #'i
bne noCom
inc pointer
cmpb @pointer, #'m
bne noCom
inc pointer
cmpb @pointer, #'e
bne noCom
jmp timeCom

mCom:
; If we got here we had 'm'
inc pointer
cmpb @pointer, #'o
bne noCom
inc pointer
cmpb @pointer, #'v
bne noCom
inc pointer
cmpb @pointer, #'e
bne noCom
jmp moveCom
noCom: halt

startCom: halt
stopCom: halt
timeCom: halt
moveCom: halt




.=torg + 3000
command: .blkw 25.
pointer: .blkw 1
curChar: .byte 1

.even
TIMOUT:.word 1
